{"version":3,"sources":["ng://lib-utilidades/lib/lib-utilidades.service.ts","ng://lib-utilidades/lib/lib-utilidades.component.ts","ng://lib-utilidades/lib/auto-complete/auto-complete-item.ts","ng://lib-utilidades/lib/auto-complete/auto-complete-options.ts","ng://lib-utilidades/lib/auto-complete/auto-complete.component.html","ng://lib-utilidades/lib/auto-complete/auto-complete.component.ts","ng://lib-utilidades/lib/lib-utilidades.module.ts"],"names":["LibUtilidadesService","factory","ɵfac","providedIn","LibUtilidadesComponent","prototype","ngOnInit","selectors","decls","vars","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","AutocompleteItem","item","this","disabled","id","value","prettyPrint","original","_assign","_item","AutocompleteOptions","options","isSelect","maxResults","clearOnSelect","delayTime","minCharacters","selectedElement","control","mapFunction","placeholder","_options","i0.ɵɵelement","i0.ɵɵpropertyInterpolate","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵlistener","core","ɵɵrestoreView","_r13","item_r10","$implicit","i_r11","index","ɵɵnextContext","itemClick","i0.ɵɵclassProp","ctx_r9","highlightedItem","i0.ɵɵproperty","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵtextInterpolate1","AutoCompleteComponent","_disabled","inputTextValue","isQuerying","hasQueried","isFocusedInput","isFocusedItem","requiresMinCharacters","itemList","completeList","bootstrap","toUpperCase","Object","defineProperty","length","listProvider","_this","valueChanges","subscribe","data","markAsPristine","provider","selectItem","createQueryObservable","list","map","forEach","find","slice","resetFocus","inputObserver","Observable","create","observer","pipe","distinctUntilChanged","filter","_query","tap","debounceTime","switchMap","_list","error","console","_element","emitEvent","element","setValue","markAsDirty","selectedItem","inputWrapper","nativeElement","blur","inputElement","inputTextKeyDown","event","keyCode","preventDefault","inputTextKeyUp","key","inputChange","target","fetchList","filterlist","query","includes","next","elementFocus","onFocus","elementBlur","onBlur","dropdownMouseEnter","dropdownMouseLeave","itemHover","markAsTouched","markAsUntouched","indexOf","wrapperBlur","wrapperFocus","focus","ɵɵinjectAttribute","viewQuery","$event","isOpen","LibUtilidadesModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibUtilidadesService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-lib-utilidades',\n  template: `\n    <p>\n      lib-utilidades works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class LibUtilidadesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","export class AutocompleteItem {\n\n public id?: string | number;\n public value?: string;\n public prettyPrint?: string;\n public original?: any;\n public disabled = false;\n\n constructor(item?: {\n  id?: string | number,\n  value?: string,\n  prettyPrint?: string,\n  disabled?: boolean,\n  original?: any\n }) {\n  this.id = item && item.id ? item.id : null;\n  this.value = item && item.value ? item.value : null;\n  this.prettyPrint = item && item.prettyPrint ? item.prettyPrint : null;\n  this.original = item && item.original ? item.original : null;\n  this.disabled = item && item.disabled === true;\n }\n\n // tslint:disable-next-line:variable-name\n _assign(_item: AutocompleteItem) {\n  this.id = _item.id;\n  this.value = _item.value;\n  this.prettyPrint = _item.prettyPrint;\n  this.disabled = _item.disabled === true;\n  this.original = _item.original;\n }\n\n}\n","import { AbstractControl } from '@angular/forms';\nimport { AutocompleteItem } from './auto-complete-item';\n\nexport class AutocompleteOptions {\n\n public clearOnSelect: boolean;\n public delayTime: number;\n public minCharacters: number;\n public selectedElement: AutocompleteItem | string | number;\n public control: AbstractControl;\n // tslint:disable-next-line:variable-name\n public mapFunction: (any) => AutocompleteItem;\n public placeholder: string;\n public isSelect = false;\n public maxResults = null;\n\n constructor(options: {\n  clearOnSelect?: boolean,\n  delayTime?: number,\n  minCharacters?: number,\n  selectedElement?: AutocompleteItem | string | number,\n  control?: AbstractControl,\n  // tslint:disable-next-line:variable-name\n  mapFunction?: (any) => AutocompleteItem,\n  placeholder?: string,\n  isSelect?: boolean,\n  maxResults?: number\n }) {\n  this.clearOnSelect = options.clearOnSelect ? options.clearOnSelect : null;\n  this.delayTime = options.delayTime ? options.delayTime : null;\n  this.minCharacters = options.minCharacters ? options.minCharacters : null;\n  this.selectedElement = options.selectedElement ? options.selectedElement : null;\n  this.control = options.control ? options.control : null;\n  this.mapFunction = options.mapFunction ? options.mapFunction : null;\n  this.placeholder = options.placeholder ? options.placeholder : null;\n  this.isSelect = options.isSelect && options.isSelect === true;\n  this.maxResults = options.maxResults ? options.maxResults : null;\n }\n\n // tslint:disable-next-line:variable-name\n _assign(_options: AutocompleteOptions) {\n  this.clearOnSelect = _options.clearOnSelect ? _options.clearOnSelect : this.clearOnSelect;\n  this.delayTime = _options.delayTime ? _options.delayTime : this.delayTime;\n  this.minCharacters = _options.minCharacters ? _options.minCharacters : this.minCharacters;\n  if (_options.selectedElement) {\n   if (typeof _options.selectedElement !== 'string' && typeof _options.selectedElement !== 'number') {\n    this.selectedElement = new AutocompleteItem();\n    this.selectedElement._assign(_options.selectedElement);\n   } else {\n    this.selectedElement = _options.selectedElement;\n   }\n  }\n  this.control = _options.control ? _options.control : this.control;\n  this.mapFunction = _options.mapFunction ? _options.mapFunction : this.mapFunction;\n  this.placeholder = _options.placeholder ? _options.placeholder : this.placeholder;\n  this.isSelect = _options.isSelect && _options.isSelect === true;\n  this.maxResults = _options.maxResults ? _options.maxResults : null;\n }\n\n}\n","<div class=\"ios-blur-fix\" tabindex=\"0\" *ngIf=\"isOpen\"></div>\n<div class=\"autocomplete-container\" [class.querying]=\"isQuerying\" [class.focused]=\"isFocusedInput || isFocusedItem\" [class.open]=\"isOpen\">\n  <div #inputWrapper class=\"input-wrapper\" [class.form-group]=\"bootstrap\" (blur)=\"wrapperBlur()\" (input)=\"inputChange($event)\" (focus)=\"wrapperFocus()\" (keyup)=\"inputTextKeyUp($event)\" [tabindex]=\"_options.isSelect ? 0 : -1\">\n    <input #inputElement [class.form-control]=\"bootstrap\" [placeholder]=\"inputPlaceholder\" type=\"text\" (focus)=\"elementFocus()\"  (blur)=\"elementBlur()\" (keydown)=\"inputTextKeyDown($event)\" [value]=\"inputTextValue\" [tabindex]=\"!_options.isSelect ? 0 : -1\" id=\"{{id}}\" autocomplete=\"off\" [disabled]=\"disabled\"/>\n    <label *ngIf=\"!bootstrap\" for=\"{{id}}\" class=\"placeholder\">{{ _options.placeholder }}</label>\n    <span class=\"dropdown-caret\" [class.is-arrow]=\"_options.isSelect\"></span>\n  </div>\n  <div class=\"input-bottom-border\"></div>\n  <ul class=\"autocomplete-dropdown list-group\" (mouseenter)=\"dropdownMouseEnter()\" (mouseleave)=\"dropdownMouseLeave()\" [class.d-none]=\"!isOpen\">\n    <ng-container *ngIf=\"itemList\">\n      <ng-container *ngIf=\"itemList.length > 0\">\n        <li class=\"list-group-item d-block result\" *ngFor=\"let item of itemList; let i = index\" [class.disabled]=\"item.disabled\" [class.next]=\"i === highlightedItem + 1\" [class.active]=\"i === highlightedItem\" (mouseenter)=\"itemHover(i)\" (click)=\"itemClick(item.id, i)\" [tabindex]=\"isOpen ? 0 : -1\">\n          <span class=\"text-capitalize\">{{ item.prettyPrint ? item.prettyPrint : item.value }}</span>\n        </li>\n      </ng-container>\n      <li class=\"list-group-item d-block querying\" *ngIf=\"isQuerying\">\n        <span>Buscando...</span>\n      </li>\n      <li class=\"list-group-item d-block querying\" *ngIf=\"requiresMinCharacters\">\n        <span>Digita por lo menos {{ _options.minCharacters }} caracteres</span>\n      </li>\n      <li class=\"list-group-item d-block no-results\" *ngIf=\"noResults\">\n        <span>No se encontraron resultados</span>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n\n","import { Component, OnInit, ViewChild, ElementRef, Input, Attribute } from '@angular/core';\nimport { distinctUntilChanged, filter, tap, debounceTime, switchMap } from 'rxjs/operators';\nimport { AutocompleteOptions } from './auto-complete-options';\nimport { AutocompleteItem } from './auto-complete-item';\nimport { Observer, Observable } from 'rxjs';\n\n@Component({\n  selector: 'lib-auto-complete',\n  templateUrl: './auto-complete.component.html',\n  styleUrls: ['./auto-complete.component.css']\n})\nexport class AutoCompleteComponent implements OnInit {\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n  @ViewChild('inputWrapper') inputWrapper: ElementRef;\n\n  inputTextValue = '';\n  inputObserver: Observer<string>;\n\n  disabled = false;\n\n  isQuerying = false;\n  hasQueried = false;\n\n  isFocusedInput = false;\n  isFocusedItem = false;\n\n  requiresMinCharacters = false;\n\n  // tslint:disable-next-line:variable-name\n  _options: AutocompleteOptions = new AutocompleteOptions({\n    clearOnSelect: false,\n    delayTime: 600,\n    minCharacters: 3,\n    mapFunction: null,\n    control: null,\n    placeholder: '',\n    isSelect: false,\n    maxResults: null\n  });\n\n  highlightedItem = -1;\n  selectedItem: AutocompleteItem;\n\n  itemList: AutocompleteItem[] = [];\n\n  completeList: AutocompleteItem[] = null;\n  // tslint:disable-next-line:variable-name\n  listProvider: (any) => Observable<any[]>;\n\n  get noResults(): boolean { return !this.isQuerying && this.hasQueried && this.itemList.length < 1; }\n\n  // get controlClasses() {\n  //   return {\n  //     'ng-pristine': this._options.control && this._options.control.pristine,\n  //     'ng-dirty': this._options.control && this._options.control.dirty,\n  //     'ng-valid': this._options.control && this._options.control.valid,\n  //     'ng-invalid': this._options.control && this._options.control.invalid,\n  //     'ng-touched': this._options.control && this._options.control.touched,\n  //     'ng-untouched': this._options.control && this._options.control.untouched\n  //   };\n  // }\n\n  get isOpen() {\n    if (this.listProvider) {\n      return ((this.isFocusedInput || this.isFocusedItem) && (this.isQuerying || this.hasQueried));\n    } else {\n      return this.isFocusedInput || this.isFocusedItem;\n    }\n  }\n\n  get inputPlaceholder() {\n    return this.bootstrap ? this._options.placeholder : '';\n  }\n\n  @Input() id: string;\n  @Input() bootstrap = false;\n  @Input()\n  set options(options: AutocompleteOptions) {\n    this._options._assign(options);\n    if (options.control) {\n      options.control.valueChanges.subscribe(data => {\n        if (data === null) {\n          this.inputTextValue = options.placeholder;\n          this._options.control.markAsPristine();\n        }\n      });\n    }\n  }\n\n  @Input()\n  // tslint:disable-next-line:variable-name\n  set provider(provider: (any) => Observable<any[]>) {\n    if (provider) {\n      this.listProvider = provider;\n      if (this._options.selectedElement) {\n        this.selectItem(this._options.selectedElement);\n        this._options.selectedElement = null;\n      }\n      this.createQueryObservable();\n    }\n  }\n\n  @Input()\n  set list(list: any[]) {\n    if (list) {\n      if (list[0] && !list[0].original) {\n        this.itemList = this._options.mapFunction ?\n          list.map(this._options.mapFunction) :\n          list.map(item => new AutocompleteItem({ id: item.id, value: item.value, disabled: item.disabled }));\n        this.itemList.forEach((item, index) => item.original = list[index]);\n        if (this._options.control && this._options.control.value) {\n          // tslint:disable-next-line:variable-name\n          const item = this.itemList.find(_item => _item.id === this._options.control.value);\n          if (item) {\n            this.selectItem(item, false);\n          }\n        }\n      } else {\n        this.itemList = list;\n        if (this._options.maxResults) {\n          this.itemList = this.itemList.slice(0, this._options.maxResults);\n        }\n      }\n      if (this._options.selectedElement) {\n        this.selectItem(this._options.selectedElement, false);\n        this._options.selectedElement = null;\n      }\n      if (!this.completeList) {\n        this.completeList = this.itemList;\n        if (!this._options.isSelect && !this.listProvider) {\n          this.itemList = [];\n        }\n      }\n    }\n    this.resetFocus();\n  }\n  constructor(\n    // tslint:disable-next-line:variable-name\n    @Attribute('disabled') public _disabled: string\n  ) {\n    this.disabled = _disabled !== null || (_disabled && _disabled.toUpperCase() === 'DISABLED');\n  }\n\n\n  ngOnInit() {\n    if (this.itemList && this.itemList.length > 0) {\n      this.completeList = this.itemList.map(item => item);\n    }\n  }\n\n  private createQueryObservable() {\n    this.inputObserver = null;\n    // Create an observable to use the provider\n    Observable.create(observer => this.inputObserver = observer)\n      .pipe(\n        distinctUntilChanged(),\n        // tslint:disable-next-line:variable-name\n        filter((_query: string) => _query && _query.length >= this._options.minCharacters),\n        tap(() => {\n          this.isQuerying = true;\n          this.list = [];\n        }),\n        debounceTime(this._options.delayTime),\n        switchMap(this.listProvider)\n      )\n      .subscribe(\n        // tslint:disable-next-line:variable-name\n        _list => {\n          this.list = _list;\n          this.isQuerying = false;\n          this.hasQueried = true;\n        },\n        error => console.error(error)\n      );\n  }\n\n  // tslint:disable-next-line:variable-name\n  selectItem(_element: number | string | AutocompleteItem, emitEvent = true) {\n    // Find the element (wheter it is an item or an id)\n    const element = _element instanceof AutocompleteItem ?\n      _element :\n      this.itemList.filter(item => item.id === _element)[0];\n\n    // If there is an element and the element is not disabled, select it\n    if (element && !element.disabled) {\n      // Replace the input text within the element\n      this.inputTextValue = element.prettyPrint ? element.prettyPrint : element.value;\n      // If there is a control, set the value to it\n      if (this._options.control) {\n        this._options.control.setValue(element.id, { emitEvent });\n        this._options.control.markAsDirty();\n      }\n      // Clear the list if told to\n      if (this._options.clearOnSelect) {\n        this.list = [];\n      }\n      // Update the selected item\n      this.selectedItem = element;\n      // Close the dropdown\n      this.isFocusedInput = false;\n      this.isFocusedItem = false;\n      this.isQuerying = false;\n      this.hasQueried = false;\n\n      this.inputWrapper.nativeElement.blur();\n      this.inputElement.nativeElement.blur();\n    }\n  }\n\n  inputTextKeyDown(event) {\n    // Prevent the caret from moving inside the input if the user presses the Up Arrow\n    if (event.keyCode === 38) {\n      event.preventDefault();\n    }\n  }\n\n  inputTextKeyUp(event: KeyboardEvent) {\n    if (event.key === 'ArrowDown') {\n      // Arrow down, move the highlighted element\n      this.highlightedItem = this.highlightedItem + 1 >= this.itemList.length ? 0 : this.highlightedItem + 1;\n    } else if (event.key === 'ArrowUp') {\n      // Arrow up, move the hightlighted element\n      this.highlightedItem = this.highlightedItem - 1 < 0 ? this.itemList.length - 1 : this.highlightedItem - 1;\n    } else if (event.key === 'Enter' && this.itemList.length > 0) {\n      // Enter, select the element\n      const element = this.itemList[this.highlightedItem];\n      this.selectItem(element.id);\n    }\n  }\n\n  inputChange(event: any) {\n    this.inputTextValue = event.target.value;\n    this._options.control.markAsDirty();\n\n    // If there is a list provider, fetch results from it\n    if (this.listProvider) {\n      this.fetchList(this.inputTextValue);\n      // Else, if the element is not a select input, filter the complete list to fetch the results\n    } else if (!this._options.isSelect) {\n      this.filterlist(this.inputTextValue);\n    }\n  }\n\n  // Filter a complete list for results\n  filterlist(query) {\n    // If there is no query or the query is empty, use an empty list, else filter the complete list\n    this.list = query && query.length >= this._options.minCharacters ?\n      this.completeList.filter(item => {\n        if (item.prettyPrint) {\n          return item.prettyPrint.toUpperCase().includes(query.toUpperCase());\n        } else {\n          return item.value.toUpperCase().includes(query.toUpperCase());\n        }\n      }) :\n      [];\n    this.hasQueried = query.length >= this._options.minCharacters;\n    this.requiresMinCharacters = query.length < this._options.minCharacters;\n  }\n\n  // Send a new event to fetch from the list provider\n  fetchList(query) {\n    this.inputObserver.next(query);\n    if (query && query.length < this._options.minCharacters) {\n      this.list = [];\n      this.isQuerying = false;\n      this.hasQueried = false;\n    }\n  }\n  /*******************EVENTS*******************/\n\n  elementFocus() { this.onFocus(); }\n\n  elementBlur() { this.onBlur(); }\n\n  dropdownMouseEnter() { this.isFocusedItem = true; }\n\n  dropdownMouseLeave() { this.isFocusedItem = false; }\n\n  itemClick(id, index) {\n    this.highlightedItem = index;\n    this.selectItem(id);\n  }\n\n  itemHover(index) { this.highlightedItem = index; }\n\n  onBlur() {\n    this._options.control.markAsTouched();\n\n    // If the input has been blurred, pretty print the element (if there is one)\n    this.isFocusedInput = false;\n    if (this.selectedItem) {\n      this.inputElement.nativeElement.value = this.selectedItem.prettyPrint ? this.selectedItem.prettyPrint : this.selectedItem.value;\n    }\n    this.inputElement.nativeElement.blur();\n    this.inputWrapper.nativeElement.blur();\n\n    if (this._options.control) {\n      this._options.control.markAsTouched();\n    }\n  }\n\n  onFocus() {\n    this._options.control.markAsUntouched();\n\n    // If the input is focused, remove the pretty print\n    if (this.selectedItem && this.selectedItem.prettyPrint) {\n      this.inputElement.nativeElement.value = this.selectedItem.value;\n    }\n    this.isFocusedInput = true;\n    // Select the first element\n    this.resetFocus();\n  }\n\n  resetFocus() {\n    // Reset the selected element, use the first one if it is not a select component\n    if (this.itemList && this.itemList.length > 0) {\n      this.highlightedItem = this._options.isSelect && this.selectedItem ?\n        this.highlightedItem = this.itemList.indexOf(this.selectedItem) :\n        0;\n    }\n  }\n\n  wrapperBlur() {\n    if (this._options.isSelect) {\n      this.onBlur();\n    }\n  }\n\n  wrapperFocus() {\n    if (!this._options.isSelect) {\n      this.inputElement.nativeElement.focus();\n    } else {\n      this.onFocus();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { LibUtilidadesComponent } from './lib-utilidades.component';\nimport { AutoCompleteComponent } from './auto-complete/auto-complete.component';\n\n\n\n@NgModule({\n  declarations: [LibUtilidadesComponent,  AutoCompleteComponent],\n  imports: [\n  ],\n  exports: [LibUtilidadesComponent, AutoCompleteComponent]\n})\nexport class LibUtilidadesModule { }\n"]}