import { AutocompleteItem } from './auto-complete-item';
export class AutocompleteOptions {
    constructor(options) {
        this.isSelect = false;
        this.maxResults = null;
        this.clearOnSelect = options.clearOnSelect ? options.clearOnSelect : null;
        this.delayTime = options.delayTime ? options.delayTime : null;
        this.minCharacters = options.minCharacters ? options.minCharacters : null;
        this.selectedElement = options.selectedElement ? options.selectedElement : null;
        this.control = options.control ? options.control : null;
        this.mapFunction = options.mapFunction ? options.mapFunction : null;
        this.placeholder = options.placeholder ? options.placeholder : null;
        this.isSelect = options.isSelect && options.isSelect === true;
        this.maxResults = options.maxResults ? options.maxResults : null;
    }
    // tslint:disable-next-line:variable-name
    _assign(_options) {
        this.clearOnSelect = _options.clearOnSelect ? _options.clearOnSelect : this.clearOnSelect;
        this.delayTime = _options.delayTime ? _options.delayTime : this.delayTime;
        this.minCharacters = _options.minCharacters ? _options.minCharacters : this.minCharacters;
        if (_options.selectedElement) {
            if (typeof _options.selectedElement !== 'string' && typeof _options.selectedElement !== 'number') {
                this.selectedElement = new AutocompleteItem();
                this.selectedElement._assign(_options.selectedElement);
            }
            else {
                this.selectedElement = _options.selectedElement;
            }
        }
        this.control = _options.control ? _options.control : this.control;
        this.mapFunction = _options.mapFunction ? _options.mapFunction : this.mapFunction;
        this.placeholder = _options.placeholder ? _options.placeholder : this.placeholder;
        this.isSelect = _options.isSelect && _options.isSelect === true;
        this.maxResults = _options.maxResults ? _options.maxResults : null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbGliLXV0aWxpZGFkZXMvIiwic291cmNlcyI6WyJsaWIvYXV0by1jb21wbGV0ZS9hdXRvLWNvbXBsZXRlLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsTUFBTSxPQUFPLG1CQUFtQjtJQWEvQixZQUFZLE9BV1g7UUFkTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFjeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDMUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDOUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDMUUsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEYsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDcEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDcEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDO1FBQzlELElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2xFLENBQUM7SUFFRCx5Q0FBeUM7SUFDekMsT0FBTyxDQUFDLFFBQTZCO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUMxRixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDMUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzFGLElBQUksUUFBUSxDQUFDLGVBQWUsRUFBRTtZQUM3QixJQUFJLE9BQU8sUUFBUSxDQUFDLGVBQWUsS0FBSyxRQUFRLElBQUksT0FBTyxRQUFRLENBQUMsZUFBZSxLQUFLLFFBQVEsRUFBRTtnQkFDakcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUN2RDtpQkFBTTtnQkFDTixJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7YUFDaEQ7U0FDRDtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNsRSxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDbEYsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztRQUNoRSxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwRSxDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBBdXRvY29tcGxldGVJdGVtIH0gZnJvbSAnLi9hdXRvLWNvbXBsZXRlLWl0ZW0nO1xuXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlT3B0aW9ucyB7XG5cbiBwdWJsaWMgY2xlYXJPblNlbGVjdDogYm9vbGVhbjtcbiBwdWJsaWMgZGVsYXlUaW1lOiBudW1iZXI7XG4gcHVibGljIG1pbkNoYXJhY3RlcnM6IG51bWJlcjtcbiBwdWJsaWMgc2VsZWN0ZWRFbGVtZW50OiBBdXRvY29tcGxldGVJdGVtIHwgc3RyaW5nIHwgbnVtYmVyO1xuIHB1YmxpYyBjb250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG4gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbiBwdWJsaWMgbWFwRnVuY3Rpb246IChhbnkpID0+IEF1dG9jb21wbGV0ZUl0ZW07XG4gcHVibGljIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gcHVibGljIGlzU2VsZWN0ID0gZmFsc2U7XG4gcHVibGljIG1heFJlc3VsdHMgPSBudWxsO1xuXG4gY29uc3RydWN0b3Iob3B0aW9uczoge1xuICBjbGVhck9uU2VsZWN0PzogYm9vbGVhbixcbiAgZGVsYXlUaW1lPzogbnVtYmVyLFxuICBtaW5DaGFyYWN0ZXJzPzogbnVtYmVyLFxuICBzZWxlY3RlZEVsZW1lbnQ/OiBBdXRvY29tcGxldGVJdGVtIHwgc3RyaW5nIHwgbnVtYmVyLFxuICBjb250cm9sPzogQWJzdHJhY3RDb250cm9sLFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuICBtYXBGdW5jdGlvbj86IChhbnkpID0+IEF1dG9jb21wbGV0ZUl0ZW0sXG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nLFxuICBpc1NlbGVjdD86IGJvb2xlYW4sXG4gIG1heFJlc3VsdHM/OiBudW1iZXJcbiB9KSB7XG4gIHRoaXMuY2xlYXJPblNlbGVjdCA9IG9wdGlvbnMuY2xlYXJPblNlbGVjdCA/IG9wdGlvbnMuY2xlYXJPblNlbGVjdCA6IG51bGw7XG4gIHRoaXMuZGVsYXlUaW1lID0gb3B0aW9ucy5kZWxheVRpbWUgPyBvcHRpb25zLmRlbGF5VGltZSA6IG51bGw7XG4gIHRoaXMubWluQ2hhcmFjdGVycyA9IG9wdGlvbnMubWluQ2hhcmFjdGVycyA/IG9wdGlvbnMubWluQ2hhcmFjdGVycyA6IG51bGw7XG4gIHRoaXMuc2VsZWN0ZWRFbGVtZW50ID0gb3B0aW9ucy5zZWxlY3RlZEVsZW1lbnQgPyBvcHRpb25zLnNlbGVjdGVkRWxlbWVudCA6IG51bGw7XG4gIHRoaXMuY29udHJvbCA9IG9wdGlvbnMuY29udHJvbCA/IG9wdGlvbnMuY29udHJvbCA6IG51bGw7XG4gIHRoaXMubWFwRnVuY3Rpb24gPSBvcHRpb25zLm1hcEZ1bmN0aW9uID8gb3B0aW9ucy5tYXBGdW5jdGlvbiA6IG51bGw7XG4gIHRoaXMucGxhY2Vob2xkZXIgPSBvcHRpb25zLnBsYWNlaG9sZGVyID8gb3B0aW9ucy5wbGFjZWhvbGRlciA6IG51bGw7XG4gIHRoaXMuaXNTZWxlY3QgPSBvcHRpb25zLmlzU2VsZWN0ICYmIG9wdGlvbnMuaXNTZWxlY3QgPT09IHRydWU7XG4gIHRoaXMubWF4UmVzdWx0cyA9IG9wdGlvbnMubWF4UmVzdWx0cyA/IG9wdGlvbnMubWF4UmVzdWx0cyA6IG51bGw7XG4gfVxuXG4gLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbiBfYXNzaWduKF9vcHRpb25zOiBBdXRvY29tcGxldGVPcHRpb25zKSB7XG4gIHRoaXMuY2xlYXJPblNlbGVjdCA9IF9vcHRpb25zLmNsZWFyT25TZWxlY3QgPyBfb3B0aW9ucy5jbGVhck9uU2VsZWN0IDogdGhpcy5jbGVhck9uU2VsZWN0O1xuICB0aGlzLmRlbGF5VGltZSA9IF9vcHRpb25zLmRlbGF5VGltZSA/IF9vcHRpb25zLmRlbGF5VGltZSA6IHRoaXMuZGVsYXlUaW1lO1xuICB0aGlzLm1pbkNoYXJhY3RlcnMgPSBfb3B0aW9ucy5taW5DaGFyYWN0ZXJzID8gX29wdGlvbnMubWluQ2hhcmFjdGVycyA6IHRoaXMubWluQ2hhcmFjdGVycztcbiAgaWYgKF9vcHRpb25zLnNlbGVjdGVkRWxlbWVudCkge1xuICAgaWYgKHR5cGVvZiBfb3B0aW9ucy5zZWxlY3RlZEVsZW1lbnQgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBfb3B0aW9ucy5zZWxlY3RlZEVsZW1lbnQgIT09ICdudW1iZXInKSB7XG4gICAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSBuZXcgQXV0b2NvbXBsZXRlSXRlbSgpO1xuICAgIHRoaXMuc2VsZWN0ZWRFbGVtZW50Ll9hc3NpZ24oX29wdGlvbnMuc2VsZWN0ZWRFbGVtZW50KTtcbiAgIH0gZWxzZSB7XG4gICAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSBfb3B0aW9ucy5zZWxlY3RlZEVsZW1lbnQ7XG4gICB9XG4gIH1cbiAgdGhpcy5jb250cm9sID0gX29wdGlvbnMuY29udHJvbCA/IF9vcHRpb25zLmNvbnRyb2wgOiB0aGlzLmNvbnRyb2w7XG4gIHRoaXMubWFwRnVuY3Rpb24gPSBfb3B0aW9ucy5tYXBGdW5jdGlvbiA/IF9vcHRpb25zLm1hcEZ1bmN0aW9uIDogdGhpcy5tYXBGdW5jdGlvbjtcbiAgdGhpcy5wbGFjZWhvbGRlciA9IF9vcHRpb25zLnBsYWNlaG9sZGVyID8gX29wdGlvbnMucGxhY2Vob2xkZXIgOiB0aGlzLnBsYWNlaG9sZGVyO1xuICB0aGlzLmlzU2VsZWN0ID0gX29wdGlvbnMuaXNTZWxlY3QgJiYgX29wdGlvbnMuaXNTZWxlY3QgPT09IHRydWU7XG4gIHRoaXMubWF4UmVzdWx0cyA9IF9vcHRpb25zLm1heFJlc3VsdHMgPyBfb3B0aW9ucy5tYXhSZXN1bHRzIDogbnVsbDtcbiB9XG5cbn1cbiJdfQ==