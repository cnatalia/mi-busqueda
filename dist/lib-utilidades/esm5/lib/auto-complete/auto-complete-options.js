import { AutocompleteItem } from './auto-complete-item';
var AutocompleteOptions = /** @class */ (function () {
    function AutocompleteOptions(options) {
        this.isSelect = false;
        this.maxResults = null;
        this.clearOnSelect = options.clearOnSelect ? options.clearOnSelect : null;
        this.delayTime = options.delayTime ? options.delayTime : null;
        this.minCharacters = options.minCharacters ? options.minCharacters : null;
        this.selectedElement = options.selectedElement ? options.selectedElement : null;
        this.control = options.control ? options.control : null;
        this.mapFunction = options.mapFunction ? options.mapFunction : null;
        this.placeholder = options.placeholder ? options.placeholder : null;
        this.isSelect = options.isSelect && options.isSelect === true;
        this.maxResults = options.maxResults ? options.maxResults : null;
    }
    // tslint:disable-next-line:variable-name
    AutocompleteOptions.prototype._assign = function (_options) {
        this.clearOnSelect = _options.clearOnSelect ? _options.clearOnSelect : this.clearOnSelect;
        this.delayTime = _options.delayTime ? _options.delayTime : this.delayTime;
        this.minCharacters = _options.minCharacters ? _options.minCharacters : this.minCharacters;
        if (_options.selectedElement) {
            if (typeof _options.selectedElement !== 'string' && typeof _options.selectedElement !== 'number') {
                this.selectedElement = new AutocompleteItem();
                this.selectedElement._assign(_options.selectedElement);
            }
            else {
                this.selectedElement = _options.selectedElement;
            }
        }
        this.control = _options.control ? _options.control : this.control;
        this.mapFunction = _options.mapFunction ? _options.mapFunction : this.mapFunction;
        this.placeholder = _options.placeholder ? _options.placeholder : this.placeholder;
        this.isSelect = _options.isSelect && _options.isSelect === true;
        this.maxResults = _options.maxResults ? _options.maxResults : null;
    };
    return AutocompleteOptions;
}());
export { AutocompleteOptions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1jb21wbGV0ZS1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbGliLXV0aWxpZGFkZXMvIiwic291cmNlcyI6WyJsaWIvYXV0by1jb21wbGV0ZS9hdXRvLWNvbXBsZXRlLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQ7SUFhQyw2QkFBWSxPQVdYO1FBZE0sYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBY3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzFFLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlELElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzFFLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2hGLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BFLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BFLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztRQUM5RCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsRSxDQUFDO0lBRUQseUNBQXlDO0lBQ3pDLHFDQUFPLEdBQVAsVUFBUSxRQUE2QjtRQUNwQyxJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDMUYsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFFLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUMxRixJQUFJLFFBQVEsQ0FBQyxlQUFlLEVBQUU7WUFDN0IsSUFBSSxPQUFPLFFBQVEsQ0FBQyxlQUFlLEtBQUssUUFBUSxJQUFJLE9BQU8sUUFBUSxDQUFDLGVBQWUsS0FBSyxRQUFRLEVBQUU7Z0JBQ2pHLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO2dCQUM5QyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDdkQ7aUJBQU07Z0JBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDO2FBQ2hEO1NBQ0Q7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDbEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNsRixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUM7UUFDaEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDcEUsQ0FBQztJQUVGLDBCQUFDO0FBQUQsQ0FBQyxBQXhERCxJQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEF1dG9jb21wbGV0ZUl0ZW0gfSBmcm9tICcuL2F1dG8tY29tcGxldGUtaXRlbSc7XG5cbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGVPcHRpb25zIHtcblxuIHB1YmxpYyBjbGVhck9uU2VsZWN0OiBib29sZWFuO1xuIHB1YmxpYyBkZWxheVRpbWU6IG51bWJlcjtcbiBwdWJsaWMgbWluQ2hhcmFjdGVyczogbnVtYmVyO1xuIHB1YmxpYyBzZWxlY3RlZEVsZW1lbnQ6IEF1dG9jb21wbGV0ZUl0ZW0gfCBzdHJpbmcgfCBudW1iZXI7XG4gcHVibGljIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDtcbiAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuIHB1YmxpYyBtYXBGdW5jdGlvbjogKGFueSkgPT4gQXV0b2NvbXBsZXRlSXRlbTtcbiBwdWJsaWMgcGxhY2Vob2xkZXI6IHN0cmluZztcbiBwdWJsaWMgaXNTZWxlY3QgPSBmYWxzZTtcbiBwdWJsaWMgbWF4UmVzdWx0cyA9IG51bGw7XG5cbiBjb25zdHJ1Y3RvcihvcHRpb25zOiB7XG4gIGNsZWFyT25TZWxlY3Q/OiBib29sZWFuLFxuICBkZWxheVRpbWU/OiBudW1iZXIsXG4gIG1pbkNoYXJhY3RlcnM/OiBudW1iZXIsXG4gIHNlbGVjdGVkRWxlbWVudD86IEF1dG9jb21wbGV0ZUl0ZW0gfCBzdHJpbmcgfCBudW1iZXIsXG4gIGNvbnRyb2w/OiBBYnN0cmFjdENvbnRyb2wsXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXG4gIG1hcEZ1bmN0aW9uPzogKGFueSkgPT4gQXV0b2NvbXBsZXRlSXRlbSxcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmcsXG4gIGlzU2VsZWN0PzogYm9vbGVhbixcbiAgbWF4UmVzdWx0cz86IG51bWJlclxuIH0pIHtcbiAgdGhpcy5jbGVhck9uU2VsZWN0ID0gb3B0aW9ucy5jbGVhck9uU2VsZWN0ID8gb3B0aW9ucy5jbGVhck9uU2VsZWN0IDogbnVsbDtcbiAgdGhpcy5kZWxheVRpbWUgPSBvcHRpb25zLmRlbGF5VGltZSA/IG9wdGlvbnMuZGVsYXlUaW1lIDogbnVsbDtcbiAgdGhpcy5taW5DaGFyYWN0ZXJzID0gb3B0aW9ucy5taW5DaGFyYWN0ZXJzID8gb3B0aW9ucy5taW5DaGFyYWN0ZXJzIDogbnVsbDtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSBvcHRpb25zLnNlbGVjdGVkRWxlbWVudCA/IG9wdGlvbnMuc2VsZWN0ZWRFbGVtZW50IDogbnVsbDtcbiAgdGhpcy5jb250cm9sID0gb3B0aW9ucy5jb250cm9sID8gb3B0aW9ucy5jb250cm9sIDogbnVsbDtcbiAgdGhpcy5tYXBGdW5jdGlvbiA9IG9wdGlvbnMubWFwRnVuY3Rpb24gPyBvcHRpb25zLm1hcEZ1bmN0aW9uIDogbnVsbDtcbiAgdGhpcy5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXIgPyBvcHRpb25zLnBsYWNlaG9sZGVyIDogbnVsbDtcbiAgdGhpcy5pc1NlbGVjdCA9IG9wdGlvbnMuaXNTZWxlY3QgJiYgb3B0aW9ucy5pc1NlbGVjdCA9PT0gdHJ1ZTtcbiAgdGhpcy5tYXhSZXN1bHRzID0gb3B0aW9ucy5tYXhSZXN1bHRzID8gb3B0aW9ucy5tYXhSZXN1bHRzIDogbnVsbDtcbiB9XG5cbiAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuIF9hc3NpZ24oX29wdGlvbnM6IEF1dG9jb21wbGV0ZU9wdGlvbnMpIHtcbiAgdGhpcy5jbGVhck9uU2VsZWN0ID0gX29wdGlvbnMuY2xlYXJPblNlbGVjdCA/IF9vcHRpb25zLmNsZWFyT25TZWxlY3QgOiB0aGlzLmNsZWFyT25TZWxlY3Q7XG4gIHRoaXMuZGVsYXlUaW1lID0gX29wdGlvbnMuZGVsYXlUaW1lID8gX29wdGlvbnMuZGVsYXlUaW1lIDogdGhpcy5kZWxheVRpbWU7XG4gIHRoaXMubWluQ2hhcmFjdGVycyA9IF9vcHRpb25zLm1pbkNoYXJhY3RlcnMgPyBfb3B0aW9ucy5taW5DaGFyYWN0ZXJzIDogdGhpcy5taW5DaGFyYWN0ZXJzO1xuICBpZiAoX29wdGlvbnMuc2VsZWN0ZWRFbGVtZW50KSB7XG4gICBpZiAodHlwZW9mIF9vcHRpb25zLnNlbGVjdGVkRWxlbWVudCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIF9vcHRpb25zLnNlbGVjdGVkRWxlbWVudCAhPT0gJ251bWJlcicpIHtcbiAgICB0aGlzLnNlbGVjdGVkRWxlbWVudCA9IG5ldyBBdXRvY29tcGxldGVJdGVtKCk7XG4gICAgdGhpcy5zZWxlY3RlZEVsZW1lbnQuX2Fzc2lnbihfb3B0aW9ucy5zZWxlY3RlZEVsZW1lbnQpO1xuICAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbGVjdGVkRWxlbWVudCA9IF9vcHRpb25zLnNlbGVjdGVkRWxlbWVudDtcbiAgIH1cbiAgfVxuICB0aGlzLmNvbnRyb2wgPSBfb3B0aW9ucy5jb250cm9sID8gX29wdGlvbnMuY29udHJvbCA6IHRoaXMuY29udHJvbDtcbiAgdGhpcy5tYXBGdW5jdGlvbiA9IF9vcHRpb25zLm1hcEZ1bmN0aW9uID8gX29wdGlvbnMubWFwRnVuY3Rpb24gOiB0aGlzLm1hcEZ1bmN0aW9uO1xuICB0aGlzLnBsYWNlaG9sZGVyID0gX29wdGlvbnMucGxhY2Vob2xkZXIgPyBfb3B0aW9ucy5wbGFjZWhvbGRlciA6IHRoaXMucGxhY2Vob2xkZXI7XG4gIHRoaXMuaXNTZWxlY3QgPSBfb3B0aW9ucy5pc1NlbGVjdCAmJiBfb3B0aW9ucy5pc1NlbGVjdCA9PT0gdHJ1ZTtcbiAgdGhpcy5tYXhSZXN1bHRzID0gX29wdGlvbnMubWF4UmVzdWx0cyA/IF9vcHRpb25zLm1heFJlc3VsdHMgOiBudWxsO1xuIH1cblxufVxuIl19